//
//  main.cpp
//  deal_sentence
//
//  Created by YWep on 16/9/6.
//  Copyright ? 2016年 YWep. All rights reserved.
//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <stack>
using namespace std;
typedef enum{
    NONE, STRING, INT, DOUBLE, DATE
}dataType;
typedef struct {
    int year;
    int month;
    int day;
}date;
typedef struct{
    int rowNum;//行号
    string Data[10];
}rowData;
typedef struct{
    int fieldNum;//字段编号（列号）
    string fieldName;//字段名称
    dataType theType;//?数据类型
    int limitation;//限制条件
}fieldType;
typedef struct{
    vector<fieldType> field;
    vector<rowData> data;
    string name;
}table;//表格
typedef struct{
    string fieldName;
    string data;
}pairData;//插入数据
typedef struct
{
    string fieldName;
    string compareMark;
    string value;
    string rel;
    string fieldType;
}shortString;//where语句处理
typedef   struct
{
    vector<shortString> shortStrings;
    bool flag;
}djString;
map<string, int> findFieldnum;
//列号与字段名的映射
int step_1(char x)
{
    if (x == '+')
        return 1;
    if (x == '*')
        return 2;
    else
        return 0;
}
int find_ans(int x, char y, int z)
{
    if (y == '+')
        return x + z;
    if (y == '*')
        return x*z;
    else
        return 0;
}
//中缀转后缀计算是否为合法记录
int calculation(string ss)
{
    int i, len, type;
    stack <int > numm;
    stack<char> s;
    type = 0;         //type 为0的时候输入数字，为1的时候输入运算符//
    len = (int)ss.length();
    while (!numm.empty())
    {
        numm.pop();
    }
    while (!s.empty())
    {
        s.pop();
    }
    for (i = 0; i<len; i++)
    {
        
        if ((ss[i] <= '9') && (ss[i] >= '0'))//如果是数字的话
        {
            int fu;
            fu = 0;
            if (i>1)
            {
                if ((ss[i - 1] == '-') && ((ss[i - 2]>'9') || (ss[i - 2]<'0')))//判断是否为负数（没有考虑首位为负）
                    fu = 1;
            }
            if (i == 1)
            {
                if (ss[i - 1] == '-')
                    fu = 1;//考虑首位
            }
            if (type == 0)
                type = (type ^ 1);
            int num1, temp;
            num1 = ss[i] - '0';
            while (1)
            {
                temp = ss[i + 1] - '0';
                if ((temp <= 9) && (temp >= 0))
                {
                    num1 = num1 * 10 + temp;
                    i++;
                }
                else
                    break;
            }
            if (fu == 1)
                num1 = 0 - num1;
            numm.push(num1);//放入栈
        }
        else
        {
            int cal1, cal2;
            cal1 = step_1(ss[i]);
            if (type == 0 && ss[i] == '-')
                continue;
            else if (type == 1)
                type = (type ^ 1);
            while (!s.empty())
            {
                cal2 = step_1(s.top());
                if (((cal2<cal1) && (cal1 != 5)) || ((cal1 == cal2) && (cal1 == 3)))
                {
                    break;
                }
                if ((cal1 <= cal2))
                {
                    if (cal2 != 4)
                    {
                        int n1, n2;
                        char c;
                        c = s.top();
                        n1 = numm.top();
                        numm.pop();
                        n2 = numm.top();
                        numm.pop();
                        numm.push(find_ans(n2, c, n1));
                        s.pop();
                    }
                    else
                        break;
                }
            }
            if (cal1 != 5)
                s.push(ss[i]);
        }
    }
    while (!s.empty())
    {
        int n1, n2;
        char c;
        c = s.top();
        n1 = numm.top();
        numm.pop();
        n2 = numm.top();
        numm.pop();
        numm.push(find_ans(n2, c, n1));
        s.pop();
    }
    return numm.top();
}
//出错处理
string check_true(table a, shortString b)
{
    string ss;
    int i,flag;
    flag=0;
    //map
    for(i=0;i<a.field.size();i++)
    {
        if(a.field[i].fieldName.compare(b.fieldName)==0)
        {
            flag=1;
            break;
        }
    }
    if (flag==0)
    {
        ss = "WRONG";
        return ss;
    }
    //ex
    else
    {
        for (int i = 0; i<a.field.size(); i++)
        {
            if (a.field[i].fieldName == b.fieldName)
            {
                if ((a.field[i].theType == STRING) || (a.field[i].theType == NONE) || (a.field[i].theType == DATE))
                {
                    
                    if (b.compareMark.compare("<")==0 || b.compareMark.compare(">")==0)
                    {
                        ss = "WRONG";
                        return ss;
                    }
                    else
                    {
                        ss = "STRING";
                        return ss;
                    }
                }
                if ((a.field[i].theType == INT) || (a.field[i].theType == DOUBLE))
                {
                    int len = (int)b.value.length();
                    for (int i = 0; i<len; i++)
                    {
                        if (b.value[i]<48 || b.value[i]>57)//ascii
                        {
                            ss = "WRONG";
                            return ss;
                        }
                    }
                    if (a.field[i].theType == INT)
                    {
                        ss = "INT";
                        return ss;
                    }
                    if (a.field[i].theType == DOUBLE)
                    {
                        ss = "DOUBLE";
                        return ss;
                    }
                }
            }
            
        }
    }
    return ss;
}
//分解成小句子
djString dealWith_Command(table a, string command)
{
    djString temp1;
    vector<shortString> temp2;
    shortString temp3;
    int flag1, i, j;
    int len = (int)command.length() - 1;//;
    for (i = 0; i<=len; i++)
    {
        flag1 = i;
        //1
        while (1)
        {
            if(command[i] =='<' || command[i] == '>' || command[i] == '=' || command[i] == '!')
                break;
            if (i == len - 1)
                break;
            else
                i++;
        }
        //1
        for (j = flag1; j<i; j++)
        {
            temp3.fieldName += command[j];
        }
        //2
        if (command[i] == '!')
        {
            temp3.compareMark = "!=";
            i = i + 3;//"
        }
        else
        {
            temp3.compareMark += command[i];
            i = i + 1;
        }
        flag1 = i;
        //3
        while (1)
        {
            if(command[i]=='A'||command[i]=='O')
                break;
            if(i==len)
                break;
            i++;
        }
        //3
        for (j = flag1; j<i; j++)
        {
            temp3.value += command[j];
        }
        if(i==len)
            temp3.value+=command[i];
        //4
        if (command[i] == 'A')
        {
            i=i+2;
            temp3.rel = '*';
        }
        else
        {
            i=i+1;
            temp3.rel = '+';
        }
        //justice
        //temp3    *
        if (check_true(a, temp3).compare("WRONG") != 0)
        {
            temp3.fieldType = check_true(a, temp3);
            temp2.push_back(temp3);
            temp3.compareMark="";
            temp3.fieldName="";
            temp3.fieldType="";
            temp3.rel="";
            temp3.value="";
            continue;
        }
        else
        {
            temp1.flag = false;
            return temp1;
        }
        
        
    }
    temp1.shortStrings = temp2;
    temp1.flag = true;
    return temp1;
}
//返回筛选出满足要求的记录号
vector<int> dealWith_Where(table theTable, string where_command)//¥??ìwhere”??‰
{
    vector<int> a;
    string ss;
    djString dealStrings;
    dealStrings = dealWith_Command(theTable, where_command);
    if (dealStrings.flag == false)
    {
        a.push_back((int)theTable.data.size());//放入不可能数字做错误处理
    }
    else
    {
        for (int i = 0; i < theTable.data.size(); i++)//逐行处理
        {
            for (int j = 0; j < dealStrings.shortStrings.size(); j++)
            {
                int num=0;
                //map
                for(int k=0;k<theTable.field.size();k++)
                {
                    if(theTable.field[k].fieldName.compare(dealStrings.shortStrings[j].fieldName)==0)
                    {
                        num=k;
                        break;
                    }
                }
                if (dealStrings.shortStrings[j].fieldType.compare("STRING")==0)
                {
                    if (dealStrings.shortStrings[j].compareMark.compare("=") == 0)
                    {
                        if (theTable.data[i].Data[num].compare(dealStrings.shortStrings[j].value) == 0)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                        
                    }
                    if (dealStrings.shortStrings[j].compareMark.compare("!=") == 0)
                    {
                        if (theTable.data[i].Data[num].compare(dealStrings.shortStrings[j].value) != 0)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                    }
                    
                }
                if (dealStrings.shortStrings[j].fieldType.compare("INT")==0)
                {
                    int x, y;
                    x = atoi(theTable.data[i].Data[num].c_str());
                    y = atoi(dealStrings.shortStrings[j].value.c_str());
                    if (dealStrings.shortStrings[j].compareMark.compare("=") == 0)
                    {
                        if (x == y)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                        
                    }
                    if (dealStrings.shortStrings[j].compareMark.compare("!=") == 0)
                    {
                        if (x != y)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                    }
                    if (dealStrings.shortStrings[j].compareMark.compare("<") == 0)
                    {
                        if (x < y)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                    }
                    if (dealStrings.shortStrings[j].compareMark.compare(">") == 0)
                    {
                        if (x > y)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                    }
                    
                }
                if (dealStrings.shortStrings[j].fieldType.compare("DOUBLE")==0)
                {
                    double x, y;
                    x = atof(theTable.data[i].Data[num].c_str());
                    y = atof(dealStrings.shortStrings[j].value.c_str());
                    if (dealStrings.shortStrings[j].compareMark.compare("=") == 0)
                    {
                        if (x == y)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                        
                    }
                    if (dealStrings.shortStrings[j].compareMark.compare("!=") == 0)
                    {
                        if (x != y)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                    }
                    if (dealStrings.shortStrings[j].compareMark.compare("<") == 0)
                    {
                        if (x < y)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                    }
                    if (dealStrings.shortStrings[j].compareMark.compare(">") == 0)
                    {
                        if (x > y)//ok
                        {
                            ss += '1';
                        }
                        else
                        {
                            ss += '0';
                        }
                    }
                    
                }
                if(j!=dealStrings.shortStrings.size()-1)
                ss += dealStrings.shortStrings[j].rel;
                
            }
            if (calculation(ss) > 0)
                a.push_back(i);
            ss="";
        }
    }
    return a;
}
void randomInput()
{
    table a;
    a.name = "测试";
    string tempStr = a.name + ".wow";
    FILE *file = fopen(tempStr.c_str(), "w");
    fprintf(file, "field:3####\n");
    fprintf(file, "NAME||STRING||00||###\n");
    fprintf(file, "NUM||INT||11||###\n");
    fprintf(file, "AGE||INT||00||###\n");
    fprintf(file, "data:10000####\n");
    for (int i = 0; i < 10000; i++)
    {
        int randomnum = rand() % 10;
        char x[257];
        for (int j = 0; j < randomnum; j++)
        {
            x[j] = 'a' + rand() % 26;
        }
        x[randomnum] = '\0';
        fprintf(file, "%s||", x);
        int temp = rand() % 1000;
        fprintf(file, "%d||", temp);
        int temp1 = rand() % 4+18;
        fprintf(file, "%d||",temp1);
        fprintf(file, "###\n");
    }
    fclose(file);
}
table openTable(string tableName)//打开磁盘中的表
{
    table answerTable;
    answerTable.name = tableName;
    string tempStr = tableName + ".wow";
    FILE *file = fopen(tempStr.c_str(), "r");
    char temp[26000];
    while (fscanf(file, "%s", temp) != EOF)
    {
        int len = (int)strlen(temp);
        char str1[26000];
        char str2[26000];
        int flag = 0;
        int j = 0;
        for (int i = 0; i < len; i++)
        {
            if (temp[i] == '#')
            {
                bool tempflag = true;
                for (int j = i; j < len&&j < i + 4; j++)
                {
                    if (temp[j] != '#')
                    {
                        tempflag = false;
                        break;
                    }
                }
                if (tempflag)break;
            }
            if (flag == 0)
            {
                if (temp[i] != ':')
                {
                    str1[i] = temp[i];
                }
                else
                {
                    str1[i] = '\0';
                    flag = 1;
                }
            }
            else
            {
                str2[j++] = temp[i];
            }
        }
        str2[j] = '\0';
        int Num = atoi(str2);
        if (strcmp(str1, "field") == 0)
        {
            for (int n = 0; n < Num; n++)
            {
                fieldType tempField;
                fscanf(file, "%s", temp);
                len = (int)strlen(temp);
                int tempflag = 0;
                char temp1[256], temp2[256], temp3[256];
                for (int i = 0, j = 0, k = 0; i < len; i++)
                {
                    if (tempflag == 0)
                    {
                        if (temp[i] == '|'&&temp[i + 1] == '|')
                        {
                            temp1[i] = '\0';
                            tempflag++;
                            i++;
                            continue;
                        }
                        temp1[i] = temp[i];
                    }
                    else if (tempflag == 1)
                    {
                        if (temp[i] == '|'&&temp[i + 1] == '|')
                        {
                            temp2[j] = '\0';
                            tempflag++;
                            i++;
                            continue;
                        }
                        temp2[j++] = temp[i];
                    }
                    else if (tempflag == 2)
                    {
                        if (temp[i] == '|'&&temp[i + 1] == '|')
                        {
                            temp3[k] = '\0';
                            tempflag++;
                            i++;
                            continue;
                        }
                        temp3[k++] = temp[i];
                    }
                    else break;
                }
                string tempName(temp1);
                tempField.fieldName = tempName;
                tempField.limitation = atoi(temp3);
                if (strcmp(temp2, "INT") == 0)tempField.theType = INT;
                else if (strcmp(temp2, "STRING") == 0)tempField.theType = STRING;
                else if (strcmp(temp2, "DOUBLE") == 0)tempField.theType = DOUBLE;
                else if (strcmp(temp2, "DATE") == 0)tempField.theType = DATE;
                tempField.fieldNum = (int)answerTable.field.size();
                answerTable.field.push_back(tempField);
            }
        }
        else if (strcmp(str1, "data") == 0)
        {
            for (int n = 0; n < Num; n++)
            {
                fscanf(file, "%s", temp);
                int len =(int)strlen(temp);
                rowData tempRowData;
                char str[260];
                int p = 0;
                int Datap = 0;
                for (int i = 0; i < len; i++)
                {
                    if (temp[i] == '|'&&temp[i + 1] == '|')
                    {
                        str[p] = '\0';
                        string tempStr(str);
                        tempRowData.Data[Datap++] = tempStr;
                        p = 0;
                        i++;
                        continue;
                    }
                    str[p++] = temp[i];
                }
                tempRowData.rowNum = (int)answerTable.data.size();
                answerTable.data.push_back(tempRowData);
            }
        }
    }
    fclose(file);
    return answerTable;
}
//去空格去“”
string preWhere(string ss)
{
    int i,flag1,flag2;
    flag1=flag2=0;
    cout<<ss<<endl;
    for(i=0;i<ss.size();i++)
    {
        if(ss[i]=='\"')
        {
            flag1++;
            ss.erase(i,1);
            i--;
        }
        if((ss[i]==' ')&&(flag1%2==0))
        {
            ss.erase(i,1);
            i--;
        }
    }
    return ss;
}
int main(int argc, const char * argv[])
{
    randomInput();
    table a = openTable("测试");
    vector<int> ans;
    string ss,temp;
    getline(cin,ss);
  //  for(int i=0;i<ss.length();i++)
    //    cout<<ss[i]<<' ';
    cout<<ss<<endl;
    
    temp=preWhere(ss);
    cout<<temp<<endl;
    ans=dealWith_Where(a, temp);
    for(int i=0;i<ans.size();i++)
    {
        cout<<ans[i]<<endl;
    }
    return 0;
}
